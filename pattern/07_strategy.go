package pattern

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
Паттерн "стратегия" позволяет определить семейство алгоритмов, инкапсулировать каждый из них и делать их взаимозаменяемыми.
Это позволяет менять алгоритмы независимо от клиентского кода, который их использует.

В данном примере Strategy - это интерфейс, описывающий общий метод Execute для выполнения операции.
AddStrategy и SubtractStrategy - это конкретные стратегии, реализующие разные алгоритмы сложения и вычитания.
Context - это контекст, который использует стратегию для выполнения операции.

Применимость паттерна "стратегия":

Когда есть несколько похожих классов с разными поведениями, и вам нужно выбирать между ними в зависимости от контекста.
Когда у вас есть множество схожих классов, отличающихся только способом выполнения какой-либо операции.
Когда вы хотите изолировать алгоритмы от клиентского кода, чтобы облегчить поддержку и изменения.

Плюсы паттерна "стратегия":

Гибкость: Позволяет легко подменять алгоритмы без изменения клиентского кода.
Модульность: Каждая стратегия инкапсулирует конкретное поведение, что делает код более читаемым и понятным.
Уменьшение связанности: Контекст зависит от абстракции стратегии, а не от конкретных реализаций, что уменьшает связанность.

Минусы паттерна "стратегия":

Увеличение числа классов: Внедрение этого паттерна может привести к увеличению числа классов, что может усложнить структуру проекта.
Усложнение понимания: Если количество стратегий слишком велико, может быть сложно разобраться, какая стратегия подходит для какого случая.

Реальные примеры использования паттерна "стратегия" на практике:

Сортировка в стандартной библиотеке: В языках программирования часто предоставляются различные алгоритмы сортировки (например, быстрая сортировка, сортировка слиянием), которые могут быть выбраны в зависимости от конкретных требований.
Графические библиотеки: В графических библиотеках можно использовать стратегии для выбора разных алгоритмов рендеринга или обработки изображений.
Платежные системы: В платежных системах можно применять стратегии для обработки различных методов оплаты, таких как кредитные карты, электронные кошельки и другие.
Алгоритмы поиска: При разработке поисковых систем можно использовать стратегии для выбора оптимального алгоритма поиска или ранжирования результатов.
*/

// Strategy - интерфейс стратегии
type Strategy interface {
	Execute(int, int) int
}

// AddStrategy - конкретная стратегия сложения
type AddStrategy struct{}

func (a *AddStrategy) Execute(augend, addend int) int {
	return augend + addend
}

// SubtractStrategy - конкретная стратегия вычитания
type SubtractStrategy struct{}

func (s *SubtractStrategy) Execute(minuend, subtrahend int) int {
	return minuend - subtrahend
}

// Context - контекст, использующий стратегию
type Context struct {
	strategy Strategy
}

func (c *Context) SetStrategy(strategy Strategy) {
	c.strategy = strategy
}

func (c *Context) ExecuteStrategy(a, b int) int {
	return c.strategy.Execute(a, b)
}
