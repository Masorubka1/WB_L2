package pattern

/*
	Реализовать паттерн «строитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Builder_pattern
*/

/*
Паттерн Строитель (Builder) является порождающим паттерном проектирования, который позволяет создавать сложные объекты пошагово. Он позволяет разделить процесс создания объекта на отдельные шаги и упростить конструирование объекта, предоставляя гибкость в настройке его свойств.

Применимость паттерна Строитель:

Когда необходимо создавать сложные объекты, состоящие из множества компонентов или свойств.
Когда требуется разделить процесс создания объекта на отдельные шаги, чтобы упростить его конструирование.
Когда нужно предоставить различные варианты конфигурации объекта, не загромождая его конструкторы различными аргументами.
Когда нужно обеспечить независимость от конкретных компонентов, используемых в объекте.

Плюсы использования паттерна Строитель:

Упрощение создания сложных объектов путем разделения конструирования на отдельные шаги.
Позволяет создавать объекты с различными конфигурациями, используя один и тот же строитель.
Изоляция процесса конструирования объекта от его представления и компонентов.
Улучшение читабельности и поддерживаемости кода.

Минусы использования паттерна Строитель:

Увеличение сложности кода, так как требуется создание отдельных классов для строителей и продукта.
Возможность появления большого количества классов, если есть много различных комбинаций свойств объекта.

Реальные примеры использования паттерна Строитель:

Построение HTML-страницы с помощью библиотеки или фреймворка, где каждый компонент страницы (заголовок, параграф, изображение и т.д.) может быть создан с использованием отдельного строителя.
Конструирование объекта заказа в системе электронной коммерции, где различные компоненты заказа (товары, адрес доставки, способ оплаты и т.д.) могут быть настроены с помощью строителя заказа.
Создание сложных объектов данных, таких как графические модели или сетевые пакеты, где строитель может управлять конфигурацией и настройками объекта.
*/

import "fmt"

// Product - Продукт, который будет создаваться
type Product struct {
	Part1 string
	Part2 string
	Part3 string
}

// Builder - Интерфейс строителя
type Builder interface {
	BuildPart1()
	BuildPart2()
	BuildPart3()
	GetResult() Product
}

// ConcreteBuilder - Конкретный строитель
type ConcreteBuilder struct {
	product Product
}

func (b *ConcreteBuilder) BuildPart1() {
	b.product.Part1 = "Part 1"
}

func (b *ConcreteBuilder) BuildPart2() {
	b.product.Part2 = "Part 2"
}

func (b *ConcreteBuilder) BuildPart3() {
	b.product.Part3 = "Part 3"
}

func (b *ConcreteBuilder) GetResult() Product {
	return b.product
}

// Director - Директор, который управляет строителем
type Director struct {
	builder Builder
}

func (d *Director) Construct() {
	d.builder.BuildPart1()
	d.builder.BuildPart2()
	d.builder.BuildPart3()
}

func main() {
	builder := &ConcreteBuilder{}  // Создаем конкретного строителя
	director := &Director{builder} // Создаем директора и передаем ему строителя

	director.Construct() // Строим продукт через директора

	product := builder.GetResult() // Получаем готовый продукт от строителя

	fmt.Printf("Product: %+v\n", product)
}
