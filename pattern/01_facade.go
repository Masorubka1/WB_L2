package pattern

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
Паттерн Фасад (Facade) является структурным паттерном проектирования, который предоставляет простой интерфейс для взаимодействия с сложной системой, скрывая ее внутреннюю сложность. Он позволяет упростить использование сложной системы, предоставляя высокоуровневый интерфейс, который скрывает детали реализации.

Применимость паттерна Фасад:

Когда необходимо предоставить простой интерфейс для взаимодействия с сложной системой или подсистемой.
Когда нужно упростить использование системы, скрывая ее сложность.
Когда необходимо предоставить единый точку входа для различных подсистем.
Когда нужно уменьшить зависимости между клиентами и компонентами сложной системы.

Плюсы использования паттерна Фасад:

Упрощение использования сложных систем или подсистем.
Сокрытие сложности и деталей реализации от клиентов.
Уменьшение зависимостей между клиентами и компонентами системы.
Повышение уровня абстракции и удобства использования.

Минусы использования паттерна Фасад:

Возможно, что клиенты не смогут получить доступ к некоторым функциональностям или деталям системы, скрытых за фасадом.
Фасад может стать сложным и перегруженным, если требуется предоставить слишком много функциональностей или подсистем.

Реальные примеры использования паттерна Фасад:

Библиотеки и фреймворки, которые предоставляют простой интерфейс для работы с различными сложными API или сервисами. Например, фреймворк Hibernate в Java упрощает работу с базами данных, предоставляя удобный интерфейс для выполнения CRUD операций.
Веб-фреймворки, которые скрывают сложность веб-разработки, предоставляя удобные методы для маршрутизации запросов, обработки данных и генерации HTML страниц.
Классы-обертки для сложных сторонних библиотек или сервисов, которые предоставляют простой интерфейс для работы с ними.
*/

import (
	"fmt"
	"io/ioutil"
	"os"
)

// FilesystemFacade - Фасад для работы с файловой системой
type FilesystemFacade struct{}

// ReadFile - Чтение содержимого файла
func (f *FilesystemFacade) ReadFile(filename string) (string, error) {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

// WriteFile - Запись содержимого в файл
func (f *FilesystemFacade) WriteFile(filename, content string) error {
	return ioutil.WriteFile(filename, []byte(content), 0644)
}

// RemoveFile - Удаление файла
func (f *FilesystemFacade) RemoveFile(filename string) error {
	return os.Remove(filename)
}

func main() {
	fs := &FilesystemFacade{}

	// Чтение содержимого файла
	content, err := fs.ReadFile("data.txt")
	if err != nil {
		fmt.Println("Ошибка при чтении файла:", err)
	} else {
		fmt.Println("Содержимое файла:", content)
	}

	// Запись содержимого в файл
	err = fs.WriteFile("data.txt", "Hello, World!")
	if err != nil {
		fmt.Println("Ошибка при записи в файл:", err)
	} else {
		fmt.Println("Файл успешно записан.")
	}

	// Удаление файла
	err = fs.RemoveFile("data.txt")
	if err != nil {
		fmt.Println("Ошибка при удалении файла:", err)
	} else {
		fmt.Println("Файл успешно удален.")
	}
}
