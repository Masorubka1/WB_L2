package pattern

/*
	Реализовать паттерн «фабричный метод».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Factory_method_pattern
*/

/*
Паттерн "фабричный метод" позволяет создавать объекты определенного типа через интерфейс или абстрактный класс,
делегируя фактическое создание экземпляра подклассам. Этот паттерн полезен, когда у вас есть семейство классов,
связанных общими интерфейсами, но конкретные классы создаются в зависимости от контекста или требований.

В данном примере Product - это интерфейс, описывающий общие методы, которые будут реализованы конкретными продуктами.
Factory - это интерфейс фабрики, который будет реализован конкретными фабриками для создания продуктов.

Применимость паттерна "фабричный метод":

Когда система должна оставаться независимой от способа создания, композиции и представления объектов.
Когда система конфигурируется одним из семейств составных объектов.
Когда вам нужно предоставить библиотеку классов, расширяемую путем наследования.

Плюсы паттерна "фабричный метод":

Разделение ответственности: Разделяет создание объектов и их использование, обеспечивая более гибкую архитектуру.
Гибкость: Позволяет добавлять новые типы продуктов и фабрик, не меняя существующий клиентский код.
Масштабируемость: Позволяет создавать семейства связанных объектов, не добавляя сложности клиентскому коду.

Минусы паттерна "фабричный метод":

Увеличение числа классов: Внедрение этого паттерна может привести к увеличению числа классов, что может затруднить поддержку кода.
Сложность: Для небольших приложений может показаться избыточным использование фабрик, что приведет к усложнению кода.

Реальные примеры использования паттерна "фабричный метод" на практике:

Библиотеки для создания графического интерфейса: В библиотеках, предоставляющих элементы интерфейса, могут быть фабрики для создания кнопок, текстовых полей и других элементов.
Базы данных: ORM (Object-Relational Mapping) библиотеки могут использовать фабричные методы для создания объектов доступа к данным, соответствующих разным таблицам.
Игровая разработка: В игровых движках фабричные методы могут использоваться для создания разных типов игровых объектов, таких как персонажи, оружие и препятствия.
Фреймворки для тестирования: В фреймворках для тестирования программного обеспечения можно использовать фабричные методы для создания различных типов тестовых данных.
Все эти примеры показывают, как паттерн "фабричный метод" помогает создавать объекты с различной функциональностью, обеспечивая гибкость, модульность и легкость поддержки кода.
*/

// Product - интерфейс продукта
type Product interface {
	Use() string
}

// Factory - интерфейс фабрики
type Factory interface {
	CreateProduct() Product
}

// ConcreteProductA - конкретный продукт A
type ConcreteProductA struct{}

func (p *ConcreteProductA) Use() string {
	return "Using ConcreteProductA"
}

// ConcreteProductB - конкретный продукт B
type ConcreteProductB struct{}

func (p *ConcreteProductB) Use() string {
	return "Using ConcreteProductB"
}

// ConcreteFactoryA - конкретная фабрика A
type ConcreteFactoryA struct{}

func (f *ConcreteFactoryA) CreateProduct() Product {
	return &ConcreteProductA{}
}

// ConcreteFactoryB - конкретная фабрика B
type ConcreteFactoryB struct{}

func (f *ConcreteFactoryB) CreateProduct() Product {
	return &ConcreteProductB{}
}
