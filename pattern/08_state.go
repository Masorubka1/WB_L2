package pattern

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern
*/

/*
Паттерн "состояние" позволяет объекту изменять свое поведение в зависимости от своего внутреннего состояния.
Это достигается путем выделения каждого состояния в отдельный класс и делегирования выполнения операций связанных с состоянием объектам-состояниям.

В данном примере Context - это контекст, у которого может меняться состояние.
State - это интерфейс состояния, который имеет метод Handle для выполнения операций в зависимости от состояния.
ConcreteStateA и ConcreteStateB - это конкретные состояния, которые реализуют метод Handle по-разному.

Применимость паттерна "состояние":

Когда объект может менять свое поведение в зависимости от его внутреннего состояния.
Когда есть множество взаимосвязанных условных операторов, которые могут быть заменены на отдельные классы состояний.

Плюсы паттерна "состояние":

Упрощение кода: Каждое состояние инкапсулирует свою логику, что делает код более читаемым и понятным.
Гибкость: Позволяет добавлять новые состояния без изменения существующего кода.
Изолированность состояний: Каждое состояние сосредотачивается на своей функциональности, что упрощает разработку и тестирование.

Минусы паттерна "состояние":

Дополнительные классы: Внедрение этого паттерна может привести к увеличению числа классов, что может увеличить сложность проекта.
Усложнение структуры: При большом количестве состояний может усложниться структура кода и его понимание.

Реальные примеры использования паттерна "состояние" на практике:

Торговые автоматы: В программировании автоматов (например, торговых автоматов или игровых элементов) можно использовать состояния для отображения разных состояний, таких как "ожидание", "продажа", "переполнение" и т.д.
Заказы в электронной коммерции: При обработке заказов в онлайн-магазинах можно использовать состояния для отслеживания этапов заказа: "новый заказ", "в обработке", "отправлен", "доставлен" и т.д.
Игровые движки: В компьютерных играх можно использовать состояния для управления различными фазами игры, такими как "начало", "игра", "пауза", "завершение" и т.д.
Обработка документов: В приложениях для обработки документов состояния можно использовать для отслеживания состояний документов, таких как "черновик", "рассмотрение", "утверждение" и др.

*/

// Context - контекст, в котором меняется состояние
type Context struct {
	state State
}

func (c *Context) SetState(state State) {
	c.state = state
}

func (c *Context) Request() {
	c.state.Handle()
}

// State - интерфейс состояния
type State interface {
	Handle()
}

// ConcreteStateA - конкретное состояние A
type ConcreteStateA struct{}

func (s *ConcreteStateA) Handle() {
	println("Handling request in ConcreteStateA")
}

// ConcreteStateB - конкретное состояние B
type ConcreteStateB struct{}

func (s *ConcreteStateB) Handle() {
	println("Handling request in ConcreteStateB")
}
